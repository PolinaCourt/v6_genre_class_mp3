# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16ev9rNzs0bMqDWACk6H7HaRzudjKX5b7
"""

import streamlit as st
import numpy as np
import joblib

# Load the trained model, scaler, and label encoder
MODEL_PATH = 'classifier_model.pkl'
SCALER_PATH = 'scaler.pkl'
LABEL_ENCODER_PATH = 'label_encoder.pkl'

model = joblib.load(MODEL_PATH)
scaler = joblib.load(SCALER_PATH)
label_encoder = joblib.load(LABEL_ENCODER_PATH)

# Streamlit App Interface
st.title("Music Genre Classifier")
st.write("Enter the following feature values to predict the genre:")

# Create input fields for each feature (8 in this case)
tempo = st.number_input("Tempo (BPM):", min_value=0.0, step=0.1)
beats = st.number_input("Beats:", min_value=0.0, step=1.0)  # Assuming beats is a numerical feature
chroma_stft = st.number_input("Chroma STFT:", min_value=0.0, step=0.01)
rmse = st.number_input("RMS Energy:", min_value=0.0, step=0.01)
spectral_centroid = st.number_input("Spectral Centroid (Hz):", min_value=0.0, step=1.0)
spectral_bandwidth = st.number_input("Spectral Bandwidth (Hz):", min_value=0.0, step=1.0)
rolloff = st.number_input("Rolloff Frequency (Hz):", min_value=0.0, step=1.0)
zero_crossing_rate = st.number_input("Zero-Crossing Rate:", min_value=0.0, step=0.01)

# Button to trigger genre prediction
if st.button("Predict Genre"):
    # Create a list of input features
    features = [tempo, beats, chroma_stft, rmse, spectral_centroid, spectral_bandwidth, rolloff, zero_crossing_rate]
    features_input = np.array(features).reshape(1, -1)

    # Scale the features
    scaled_features = scaler.transform(features_input)

    # Make prediction
    predicted_genre_encoded = model.predict(scaled_features)[0]
    predicted_genre = label_encoder.inverse_transform([predicted_genre_encoded])[0]

    # Display result
    st.success(f"Predicted Genre: **{predicted_genre}**")